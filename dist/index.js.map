{"version":3,"file":"index.js","sources":["../src/utils/capitalize.ts","../src/validation/createError.ts","../src/validation/createStandardErrors.ts","../src/validation/StandardErrors.ts","../src/validation/normalize.ts","../src/predicates/isDate.ts","../src/predicates/isEqual.ts","../src/predicates/isEmpty.ts","../src/predicates/isString.ts","../src/predicates/isNumber.ts","../src/validator.ts","../src/state/ValidationState.ts"],"sourcesContent":["/** capitalise a string */\r\nexport function capitalize(value: string): string {\r\n  return !value ? value : value[0].toUpperCase() + value.substr(1);\r\n}\r\n","import { capitalize } from \"../utils\";\r\nimport { IErrors } from \"./IErrors\";\r\n\r\n/** Creates a frozen error object\r\n *\r\n * @param not         when set will prefix the capitalised error key with 'not'\r\n * @param errorKey    key value for an error e.g. { someKey: true }\r\n * @param errorValue  value associated with the key e.g. { key: 'some value' }\r\n *\r\n * @returns           a frozen error object\r\n */\r\nexport function createError(\r\n  not: boolean,\r\n  errorKey: string,\r\n  errorValue: any = true\r\n): IErrors {\r\n  return Object.freeze({\r\n    [not ? `not${capitalize(errorKey)}` : errorKey]: errorValue\r\n  });\r\n}\r\n","import { IStandardErrors } from \"./IStandardErrors\";\r\nimport { createError } from \"./createError\";\r\n\r\n/** creates all standard errors\r\n *\r\n * @param not prefixes all capitalised keys with a 'not' e.g. { notNull: true }\r\n *\r\n * @returns standard errors\r\n */\r\nexport function createStandardErrors(not: boolean = false): IStandardErrors {\r\n  return Object.freeze({\r\n    null: createError(not, \"null\"),\r\n    number: createError(not, \"number\"),\r\n    string: createError(not, \"string\"),\r\n    equal: (to: any) => createError(not, \"equal\", to),\r\n    maxLength: (max: number) => createError(not, \"maxLength\", max),\r\n    minLength: (min: number) => createError(not, \"minLength\", min),\r\n    max: (max: number) => createError(not, \"max\", max),\r\n    min: (min: number) => createError(not, \"min\", min),\r\n    includes: (value: any) => createError(not, \"includes\", value),\r\n    matches: (re: RegExp | string) => createError(not, \"matches\", re)\r\n  });\r\n}\r\n","import { createStandardErrors } from \"./createStandardErrors\";\r\n\r\n/** StandardErrors available\r\n *\r\n * including EMPTY and negated errors\r\n *\r\n * negated error keys are prefixed by 'not' e.g. { notNull: true } */\r\nexport const StandardErrors = Object.freeze({\r\n  EMPTY: Object.freeze({}),\r\n  ...createStandardErrors(),\r\n  not: createStandardErrors(true)\r\n});\r\n","import { IErrors } from \"./IErrors\";\r\nimport { StandardErrors } from \"./StandardErrors\";\r\n\r\n/** normalize a validation result, by removing empty sub-properties\r\n *\r\n * @param errors  any result from a validation function\r\n *\r\n * @returns       the result with empty sub-properties removed\r\n */\r\nexport function normalize(errors: IErrors | any): IErrors | any {\r\n  if (typeof errors !== \"object\") return errors;\r\n\r\n  return Object.keys(errors).reduce((result, key) => {\r\n    const value = normalize(errors[key]);\r\n\r\n    return value === StandardErrors.EMPTY\r\n      ? result\r\n      : {\r\n          ...result,\r\n          [key]: value\r\n        };\r\n  }, StandardErrors.EMPTY);\r\n}\r\n","/** checks value is a date */\r\nexport function isDate(value: any): boolean {\r\n  return !isNaN(Date.parse(value));\r\n}\r\n","\r\n/** deep equality check */\r\nexport function isEqual(a: any, b: any): boolean {\r\n  if (a === b) return true;\r\n\r\n  if (a == null || b == null) return false;\r\n\r\n  if (Array.isArray(a)) {\r\n    return (\r\n      Array.isArray(b) &&\r\n      a.length === b.length &&\r\n      a.every((v, i) => isEqual(v, b[i]))\r\n    );\r\n  }\r\n\r\n  if (typeof a === 'object' || typeof b === 'object') {\r\n    const av = a.valueOf();\r\n    const bv = b.valueOf();\r\n    if (av !== a || bv !== b) return isEqual(av, bv);\r\n    return Object.keys({ ...a, ...b }).every(n => isEqual(a[n], b[n]));\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n\r\n","import { StandardErrors } from '../validation';\r\nimport { isEqual } from './isEqual';\r\nexport function isEmpty(a: any): boolean {\r\n  return (\r\n    a != null &&\r\n    a.constructor === Object &&\r\n    (a === StandardErrors.EMPTY || isEqual(a, StandardErrors.EMPTY))\r\n  );\r\n}\r\n","/** checks value is a string */\r\nexport function isString(value: any): boolean {\r\n  return typeof value === \"string\";\r\n}\r\n","import { isString } from \"./isString\";\r\n\r\n/** checks values is a number or a string which can be parsed into a number */\r\nexport function isNumber(a: any): boolean {\r\n  if (isString(a)) a = Number.parseFloat(a);\r\n  return !isNaN(a) && typeof a === \"number\";\r\n}\r\n","import {\r\n  IErrors,\r\n  StandardErrors,\r\n  IStandardErrors,\r\n  IRule,\r\n  createError\r\n} from \"./validation\";\r\nimport { isEqual, isNumber, isString } from \"./predicates\";\r\n\r\nexport class Validator {\r\n  private readonly expected: IStandardErrors;\r\n\r\n  constructor(private negate: boolean = false) {\r\n    this.expected = negate ? StandardErrors.not : StandardErrors;\r\n  }\r\n\r\n  get not(): Validator {\r\n    return new Validator(!this.negate);\r\n  }\r\n\r\n  null(a: any): IErrors {\r\n    return this.exec(a == null, this.expected.null);\r\n  }\r\n\r\n  number(a: any): IErrors {\r\n    return this.exec(isNumber(a), this.expected.number);\r\n  }\r\n\r\n  string(a: any): IErrors {\r\n    return this.exec(isString(a), this.expected.string);\r\n  }\r\n\r\n  equal(a: any, b: any): IErrors {\r\n    return this.exec(isEqual(a, b), this.expected.equal(b));\r\n  }\r\n\r\n  maxLength(a: string, max: number): IErrors {\r\n    return this.exec(a.length <= max, this.expected.maxLength(max));\r\n  }\r\n\r\n  minLength(a: string, min: number): IErrors {\r\n    return this.exec(a.length >= min, this.expected.minLength(min));\r\n  }\r\n\r\n  max(a: number, max: number): IErrors {\r\n    return this.exec(a <= max, this.expected.max(max));\r\n  }\r\n\r\n  min(a: number, min: number): IErrors {\r\n    return this.exec(a >= min, this.expected.min(min));\r\n  }\r\n\r\n  includes(a: any, b: any): IErrors {\r\n    return this.exec(a.includes(b), this.expected.includes(b));\r\n  }\r\n\r\n  matches(\r\n    value: string,\r\n    re: RegExp | string,\r\n    description: string = null\r\n  ): IErrors {\r\n    return this.exec(\r\n      new RegExp(re).test(value),\r\n      this.expected.matches(description || re)\r\n    );\r\n  }\r\n\r\n  rule(rule: IRule): IErrors {\r\n    return this.exec(\r\n      rule.result,\r\n      createError(this.negate, rule.errorKey, rule.errorValue)\r\n    );\r\n  }\r\n\r\n  private exec(result: boolean, failure: IErrors) {\r\n    return (this.negate ? !result : result) ? StandardErrors.EMPTY : failure;\r\n  }\r\n}\r\n\r\nexport const validate = new Validator();\r\n","import { isEqual } from '../predicates';\r\nimport { IErrors, StandardErrors, IValidate, normalize } from '../validation';\r\nimport { IValidationState } from './IValidationState';\r\n\r\n/** represents state for a value which is validated\r\n *\r\n *  useful for user facing components\r\n */\r\nexport class ValidationState<TValue> implements IValidationState<TValue> {\r\n  constructor(\r\n    /** validator function */\r\n    public readonly validate: IValidate<Partial<TValue>>,\r\n    /** value */\r\n    public readonly value: Partial<TValue> = null,\r\n    /** validation errors */\r\n    public readonly errors: IErrors = StandardErrors.EMPTY\r\n  ) {\r\n    if (validate == null) throw new Error('validate is required');\r\n\r\n    this.invalid = normalize(this.errors) !== StandardErrors.EMPTY;\r\n  }\r\n\r\n  /** state is invalid */\r\n  readonly invalid: boolean = false;\r\n\r\n  /** if there are changes calls validation and sets errors and invalid properites\r\n   *\r\n   * @param value     value to validate if changed\r\n   * @param onChange  a function called when change is made\r\n   * @returns         a new state object if there is change, same if not\r\n   */\r\n  async set(\r\n    value: Partial<TValue>,\r\n    onChange?: (newState: ValidationState<TValue>) => void\r\n  ): Promise<ValidationState<TValue>> {\r\n    if (isEqual(this.value, value)) return this;\r\n\r\n    const errors = await this.validate(value);\r\n    const newState = new ValidationState<TValue>(this.validate, value, errors);\r\n\r\n    if (onChange) onChange(newState);\r\n\r\n    return newState;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}