{"version":3,"file":"index.umd.js","sources":["../../src/utils/capitalize.ts","../../src/validation/createError.ts","../../src/validation/createStandardErrors.ts","../../src/predicates/isDate.ts","../../src/validation/StandardErrors.ts","../../src/predicates/isEqual.ts","../../src/predicates/isEmpty.ts","../../src/predicates/isString.ts","../../src/predicates/isNumber.ts","../../src/validation/normalizeErrors.ts","../../src/validation/hasErrors.ts","../../src/validation/ValidationError.ts","../../src/Validator.ts","../../src/validate.ts","../../src/state/ValidationState.ts"],"sourcesContent":["/** capitalise a string */\r\nexport function capitalize(value: string): string {\r\n  return !value ? value : value[0].toUpperCase() + value.substr(1);\r\n}\r\n","import { capitalize } from '../utils';\r\nimport { IErrors } from './IErrors';\r\n\r\n/** Creates a frozen error object\r\n *\r\n * @param not         when set will prefix the capitalised error key with 'not'\r\n * @param errorKey    key value for an error e.g. { someKey: true }\r\n * @param errorValue  value associated with the key e.g. { key: 'some value' }\r\n *\r\n * @returns           a frozen error object\r\n */\r\nexport function createError(\r\n  not: boolean,\r\n  errorKey: string,\r\n  errorValue: any = true\r\n): IErrors {\r\n  return Object.freeze({\r\n    [not ? `not${capitalize(errorKey)}` : errorKey]: errorValue,\r\n  });\r\n}\r\n","import { createError } from './createError';\r\nimport { IStandardErrorProviders } from \"./IStandardErrorProviders\";\r\n\r\n/** creates all standard errors\r\n *\r\n * @param not prefixes all capitalised keys with a 'not' e.g. { notNull: true }\r\n *\r\n * @returns standard errors\r\n */\r\nexport function createStandardErrors(not: boolean = false)\r\n  : IStandardErrorProviders {\r\n\r\n  return Object.freeze({\r\n    null: createError(not, 'null'),\r\n    number: createError(not, 'number'),\r\n    string: createError(not, 'string'),\r\n    equal: (to: any) => createError(not, 'equal', to),\r\n    maxLength: (max: number) => createError(not, 'maxLength', max),\r\n    minLength: (min: number) => createError(not, 'minLength', min),\r\n    max: (max: number) => createError(not, 'max', max),\r\n    min: (min: number) => createError(not, 'min', min),\r\n    includes: (value: any) => createError(not, 'includes', value),\r\n    matches: (re: RegExp | string) => createError(not, 'matches', re),\r\n  });\r\n}\r\n","/** checks value is a date */\r\nexport function isDate(value: any): boolean {\r\n  return !isNaN(Date.parse(value));\r\n}\r\n","import { createStandardErrors } from './createStandardErrors';\r\n\r\n/**\r\n * StandardErrors available\r\n *\r\n * including EMPTY and negated errors\r\n *\r\n * negated error keys are prefixed by 'not' e.g. { notNull: true }\r\n */\r\nexport const StandardErrors = Object.freeze({\r\n  EMPTY: Object.freeze({}) as any,\r\n  ...createStandardErrors(),\r\n  not: createStandardErrors(true),\r\n});\r\n","/** deep equality check */\r\nexport function isEqual(a: any, b: any): boolean {\r\n  if (a === b) return true;\r\n\r\n  if (a == null || b == null) return false;\r\n\r\n  if (Array.isArray(a)) {\r\n    return (\r\n      Array.isArray(b) &&\r\n      a.length === b.length &&\r\n      a.every((v, i) => isEqual(v, b[i]))\r\n    );\r\n  }\r\n\r\n  if (typeof a === 'object' || typeof b === 'object') {\r\n    const av = a.valueOf();\r\n    const bv = b.valueOf();\r\n    if (av !== a || bv !== b) return isEqual(av, bv);\r\n    return Object.keys({ ...a, ...b }).every((n) => isEqual(a[n], b[n]));\r\n  }\r\n\r\n  return false;\r\n}\r\n","import { StandardErrors } from '../validation/StandardErrors';\r\nimport { isEqual } from './isEqual';\r\nexport function isEmpty(a: any): boolean {\r\n  return (\r\n    a != null &&\r\n    a.constructor === Object &&\r\n    (a === StandardErrors.EMPTY || isEqual(a, StandardErrors.EMPTY))\r\n  );\r\n}\r\n","/** checks value is a string */\r\nexport function isString(value: any): boolean {\r\n  return typeof value === 'string';\r\n}\r\n","import { isString } from './isString';\r\n\r\n/** checks values is a number or a string which can be parsed into a number */\r\nexport function isNumber(a: any): boolean {\r\n  if (isString(a)) a = Number.parseFloat(a);\r\n  return !isNaN(a) && typeof a === 'number';\r\n}\r\n","import { IErrors } from './IErrors';\r\nimport { StandardErrors } from './StandardErrors';\r\n\r\n/** normalize a validation result, by removing empty sub-properties\r\n *\r\n * @param errors  any result from a validation function\r\n *\r\n * @returns       the result with empty sub-properties removed\r\n */\r\nexport function normalizeErrors(errors: IErrors | any): IErrors | any {\r\n  if (errors == null || typeof errors !== 'object') return errors;\r\n\r\n  return Object.keys(errors).reduce((result, key) => {\r\n    const value = normalizeErrors(errors[key]);\r\n\r\n    return value === StandardErrors.EMPTY\r\n      ? result\r\n      : {\r\n        ...result,\r\n        [key]: value,\r\n      };\r\n  }, StandardErrors.EMPTY);\r\n}\r\n\r\n/**\r\n * @deprecated use normalizeErrors\r\n */\r\nexport function normalize(errors: IErrors | any): IErrors | any {\r\n\r\n  return normalizeErrors(errors);\r\n}","import { isEmpty } from '../predicates';\r\nimport { IErrors } from './IErrors';\r\nimport { normalizeErrors } from './normalizeErrors';\r\n\r\n/** Checks an error object for errors optionally on a given path\r\n * \r\n * normalises the errors object first\r\n */\r\nexport function hasErrors(errors: IErrors, path?: string): boolean {\r\n\r\n  return _hasErrors(normalizeErrors(errors), path);\r\n}\r\n\r\nfunction _hasErrors(errors: IErrors, path?: string): boolean {\r\n  if (errors == null || isEmpty(errors)) return false;\r\n  if (!path) return true;\r\n\r\n  let i = path.indexOf('.');\r\n  if (i === -1) i = path.length;\r\n\r\n  return _hasErrors(errors[path.substring(0, i)], path.substring(i + 1));\r\n}","import { normalizeErrors } from './normalizeErrors';\r\nimport { ValidationErrors } from './ValidationErrors';\r\n\r\n/**\r\n * An error object for validation errors on type T\r\n */\r\nexport class ValidationError<T> extends Error {\r\n  constructor(\r\n    rawErrors: ValidationErrors<T>,\r\n    message: string = 'validation failed'\r\n  ) {\r\n    super(message);\r\n\r\n    this.errors = normalizeErrors(rawErrors);\r\n  }\r\n\r\n  /** validation errors for type T */\r\n  readonly errors: ValidationErrors<T>;\r\n}\r\n","import {\r\n  StandardErrors,\r\n  IRule,\r\n  createError,\r\n  IStandardErrorProviders,\r\n  IErrors\r\n} from './validation';\r\nimport { isEqual, isNumber, isString } from './predicates';\r\n\r\nexport class Validator {\r\n  private readonly expected: IStandardErrorProviders;\r\n\r\n  constructor(private negate: boolean = false) {\r\n    this.expected = negate ? StandardErrors.not : StandardErrors;\r\n  }\r\n\r\n  get not(): Validator {\r\n    return new Validator(!this.negate);\r\n  }\r\n\r\n  /**\r\n   * value should be null\r\n   *\r\n   * @param value value\r\n   * @returns errors\r\n   */\r\n  null(value: any) {\r\n    return this.exec(value == null, this.expected.null);\r\n  }\r\n\r\n  /**\r\n   * value should be a number\r\n   *\r\n   * @param value value\r\n   * @returns errors\r\n   */\r\n  number(value: any) {\r\n    return this.exec(value == null || isNumber(value), this.expected.number);\r\n  }\r\n\r\n  /**\r\n   * value should be a string\r\n   *\r\n   * @param value value\r\n   * @returns errors\r\n   */\r\n  string(value: any) {\r\n    return this.exec(value == null || isString(value), this.expected.string);\r\n  }\r\n\r\n  /**\r\n   * values should be equal\r\n   *\r\n   * @param a 1st value to compare\r\n   * @param b 2nd value to compare\r\n   * @returns errors\r\n   */\r\n  equal(a: any, b: any) {\r\n    return this.exec(isEqual(a, b), this.expected.equal(b));\r\n  }\r\n\r\n  /**\r\n   * value should not me more than\r\n   *\r\n   * @param value value\r\n   * @param max maximum number value\r\n   * @returns errors\r\n   */\r\n  maxLength(value: string | null, max: number) {\r\n    return this.exec(value == null || value.length <= max, this.expected.maxLength(max));\r\n  }\r\n\r\n  /**\r\n   * value should not be less than\r\n   *\r\n   * @param value value\r\n   * @param min minimum number value\r\n   * @returns errors\r\n   */\r\n  minLength(value: string | null, min: number) {\r\n    return this.exec(value == null || value.length >= min, this.expected.minLength(min));\r\n  }\r\n\r\n  /**\r\n   * value should not me more than\r\n   *\r\n   * @param value value\r\n   * @param max maximum value\r\n   * @returns errors\r\n   */\r\n  max(value: number | null, max: number) {\r\n    return this.exec(value == null || value <= max, this.expected.max(max));\r\n  }\r\n\r\n  /**\r\n   * value should not be less than\r\n   *\r\n   * @param value value\r\n   * @param min minimum value\r\n   * @returns errors\r\n   */\r\n  min(value: number | null, min: number) {\r\n    return this.exec(value == null || value >= min, this.expected.min(min));\r\n  }\r\n\r\n  /**\r\n   * 1st value includes second\r\n   *\r\n   * @param a iterable value, eg string or array\r\n   * @param b value to find\r\n   * @returns errors\r\n   */\r\n  includes(a: any, b: any) {\r\n    return this.exec(a == null || a.includes(b), this.expected.includes(b));\r\n  }\r\n\r\n  /**\r\n   * value must match regex\r\n   *\r\n   * @param value string value\r\n   * @param re regular expression\r\n   * @param description error description\r\n   * @returns errors\r\n   */\r\n  matches(\r\n    value: string | null,\r\n    re: RegExp | string,\r\n    description: string | null = null\r\n  ) {\r\n    return this.exec(\r\n      value == null || new RegExp(re).test(value),\r\n      this.expected.matches(description || re)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * value must pass the rule\r\n   *\r\n   * @param rule rule\r\n   * @returns errors\r\n   */\r\n  rule(rule: IRule) {\r\n    return this.exec(\r\n      rule.result,\r\n      createError(this.negate, rule.errorKey, rule.errorValue)\r\n    );\r\n  }\r\n\r\n  private exec<TFailure>(result: boolean, failure: TFailure): IErrors {\r\n    return (this.negate ? !result : result)\r\n      ? StandardErrors.EMPTY\r\n      : failure;\r\n  }\r\n}\r\n","import { Validator } from './Validator';\r\n\r\nexport const validate = new Validator();\r\n","import { isEqual } from '../predicates';\r\nimport {\r\n  ValidationErrors,\r\n  StandardErrors,\r\n  normalizeErrors,\r\n  IValidate, IValidateAsync,\r\n} from '../validation';\r\nimport { IValidationState } from './IValidationState';\r\n\r\n/** represents state for a value which is validated\r\n *\r\n *  useful for user facing components\r\n */\r\nexport class ValidationState<TValue> implements IValidationState<TValue> {\r\n  constructor(\r\n    /** validator function */\r\n    public readonly validate: IValidate<TValue> | IValidateAsync<TValue>,\r\n    /** value */\r\n    public readonly value: TValue | Partial<TValue> | null = null,\r\n    /** validation errors, will be normalized */\r\n    errors: ValidationErrors<TValue> = StandardErrors.EMPTY\r\n  ) {\r\n    if (validate == null) throw new Error('validate is required');\r\n\r\n    this.errors = normalizeErrors(errors);\r\n    this.invalid = this.errors !== StandardErrors.EMPTY;\r\n  }\r\n\r\n  /** validation errors */\r\n  readonly errors: ValidationErrors<TValue>;\r\n  /** state is invalid */\r\n  readonly invalid: boolean = false;\r\n\r\n  /** if there are changes calls validation and sets errors and invalid properites\r\n   *\r\n   * @param value     value to validate if changed\r\n   * @param onChange  a function called when change is made\r\n   * @returns         a new state object if there is change, same if not\r\n   */\r\n  async set(\r\n    value: TValue,\r\n    onChange?: (newState: ValidationState<TValue>) => void\r\n  ): Promise<ValidationState<TValue>> {\r\n    if (isEqual(this.value, value)) return this;\r\n\r\n    const errors = await this.validate(value);\r\n    const newState = new ValidationState<TValue>(this.validate, value, errors);\r\n\r\n    if (onChange) onChange(newState);\r\n\r\n    return newState;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}